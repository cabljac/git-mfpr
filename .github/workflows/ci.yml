name: CI

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.22"
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        env:
          CGO_ENABLED: 1
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --out-format=colored-line-number

      - name: Run golangci-lint
        run: golangci-lint run

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Debug - List files
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "cmd directory contents:"
          ls -la cmd/ || echo "cmd directory not found"
          echo "Full directory tree:"
          find . -type d -name "cmd" -exec ls -la {} \;

      - name: Build git-mfpr
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o bin/git-mfpr-${{ matrix.os }}-${{ matrix.arch }} ./cmd/git-mfpr/

      - name: Build test binary
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o bin/test-${{ matrix.os }}-${{ matrix.arch }} ./cmd/test/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/

  # RC Build on PR to main
  snapshot:
    name: Build Snapshot
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run GoReleaser snapshot
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: dist/

  # Full Release on tag push (DISABLED - uncomment when ready to release)
  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   needs: [test, lint]
  #   if: startsWith(github.ref, 'refs/tags/v')

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Run GoReleaser
  #       uses: goreleaser/goreleaser-action@v5
  #       with:
  #         distribution: goreleaser
  #         version: latest
  #         args: release --clean
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

  # Release on main push (DISABLED - uncomment when ready to release)
  # release-main:
  #   name: Release from Main
  #   runs-on: ubuntu-latest
  #   needs: [test, lint]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Run GoReleaser
  #       uses: goreleaser/goreleaser-action@v5
  #       with:
  #         distribution: goreleaser
  #         version: latest
  #         args: release --clean
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
